step(model,
scope=list(lower=basicModel, upper=model),
direction='forward', steps=25)
knitr::opts_chunk$set(echo = TRUE)
mean(loanDefaultData$LoanTerm)
sd(loanDefaultData$LoanTerm)
hist(loanDefaultData$LoanTerm, main="Histogram of Loan Term", xlab="Loan Term", col="pink", freq=FALSE)
mean(loanDefaultData$LoanAmount)
sd(loanDefaultData$LoanAmount)
hist(loanDefaultData$LoanAmount, main="Histogram of Loan Amount", xlab="Loan Amount", col="yellow", freq=FALSE)
fullmodel=glm(Default ~ Age + Income + LoanAmount + CreditScore + MonthsEmployed + NumCreditLines + InterestRate + LoanTerm + Education + EmploymentType + MaritalStatus + HasCoSigner, data=loanDefaultData, family="binomial")
basicModel = glm(Default~CreditScore+EmploymentType, data=loanDefaultData, family="binomial")
step(basicModel,
scope=list(lower=basicModel, upper=fullmodel),
direction='forward', steps=25)
step(fullmodel,
scope=list(lower=basicModel, upper=fullmodel),
direction='forward', steps=25)
knitr::opts_chunk$set(echo = TRUE)
loanDefaultData<-read.csv("../FINAL/LoanDefaultData.csv")
loanDefaultData
# The line above must contain {r ...} to specify the type of code that will be included
#  and a unique identifier for the code block in place of "..."
# If repeated names are used, Rstudio will throw an error when trying to compile
table(loanDefaultData$Default)
names(loanDefaultData)
mean(loanDefaultData$Age)
sd(loanDefaultData$Age)
hist(loanDefaultData$Age, main="Histogram of Age", xlab="Age", col="red", freq=FALSE)
mean(loanDefaultData$Income)
sd(loanDefaultData$Income)
hist(loanDefaultData$Income, main="Histogram of Income", xlab="Income", col="orange", freq=FALSE)
mean(loanDefaultData$LoanAmount)
sd(loanDefaultData$LoanAmount)
hist(loanDefaultData$LoanAmount, main="Histogram of Loan Amount", xlab="Loan Amount", col="yellow", freq=FALSE)
mean(loanDefaultData$CreditScore)
sd(loanDefaultData$CreditScore)
hist(loanDefaultData$CreditScore, main="Histogram of Credit Score", xlab="Credit Score", col="green", breaks=10)
mean(loanDefaultData$MonthsEmployed)
sd(loanDefaultData$MonthsEmployed)
hist(loanDefaultData$MonthsEmployed, main="Histogram of Months Employed", xlab="Months Employed", col="cyan", freq=FALSE)
mean(loanDefaultData$NumCreditLines)
sd(loanDefaultData$NumCreditLines)
hist(loanDefaultData$NumCreditLines, main="Histogram of Num Credit Lines", xlab="Num Credit Lines", col="blue", freq=FALSE)
mean(loanDefaultData$InterestRate)
sd(loanDefaultData$InterestRate)
hist(loanDefaultData$InterestRate, main="Histogram of Interest Rate", xlab="Interest Rate", col="purple", freq=FALSE)
mean(loanDefaultData$LoanTerm)
sd(loanDefaultData$LoanTerm)
hist(loanDefaultData$LoanTerm, main="Histogram of Loan Term", xlab="Loan Term", col="pink", freq=FALSE)
table(loanDefaultData$Education)
table(loanDefaultData$EmploymentType)
table(loanDefaultData$MaritalStatus)
table(loanDefaultData$HasCoSigner)
fullmodel=glm(Default ~ Age + Income + LoanAmount + CreditScore + MonthsEmployed + NumCreditLines + InterestRate + LoanTerm + Education + EmploymentType + MaritalStatus + HasCoSigner, data=loanDefaultData, family="binomial")
basicModel = glm(Default~CreditScore+EmploymentType, data=loanDefaultData, family="binomial")
knitr::opts_chunk$set(echo = TRUE)
callbackData<-read.csv("../Downloads/callbackData.csv")
fullmodel=glm(call~city+college+yearsexp+honors+militaryexp+
emailincluded+sex+race+computerskills+
workinschool, data=callbackData, family = "binomial")
basicmodel=glm(call~race+sex, data=callbackData, family = "binomial")
step(basicmodel,
scope=list(lower=basicmodel, upper=fullmodel),
direction='forward', steps=25)
step(fullmodel,
scope=list(lower=basicmodel, upper=fullmodel),
direction='backward', steps=25)
current.model=glm(Default ~ Age + Income + LoanAmount + CreditScore + MonthsEmployed + NumCreditLines + InterestRate + LoanTerm + Education + EmploymentType + MaritalStatus + HasCoSigner, data=loanDefaultData, family="binomial")
interaction.model = glm(Default~ (CreditScore + EmploymentType) * (Age + Income + LoanAmount + MonthsEmployed + NumCreditLines + InterestRate + LoanTerm + Education + EmploymentType + MaritalStatus + HasCoSigner), data=loanDefaultData, family="binomial")
step(current.model,
scope=list(lower=current.model, upper=interactions.model),
direction='forward', steps=25)
current.model=glm(Default ~ Age + Income + LoanAmount + CreditScore + MonthsEmployed + NumCreditLines + InterestRate + LoanTerm + Education + EmploymentType + MaritalStatus + HasCoSigner, data=loanDefaultData, family="binomial")
interactions.model = glm(Default~ (CreditScore + EmploymentType) * (Age + Income + LoanAmount + MonthsEmployed + NumCreditLines + InterestRate + LoanTerm + Education + EmploymentType + MaritalStatus + HasCoSigner), data=loanDefaultData, family="binomial")
step(current.model,
scope=list(lower=current.model, upper=interactions.model),
direction='forward', steps=25)
current.model = glm(formula = call ~ race + sex + honors + city + yearsexp +
emailincluded + workinschool + militaryexp + sex:city + sex:militaryexp +
sex:honors, family = "binomial", data = callbackData)
step(interactions.model,
scope=list(lower=current.model, upper=interactions.model),
direction='backward', steps=25)
current.model=glm(Default ~ Age + Income + LoanAmount + CreditScore + MonthsEmployed + NumCreditLines + InterestRate + LoanTerm + Education + EmploymentType + MaritalStatus + HasCoSigner, data=loanDefaultData, family="binomial")
interactions.model = glm(Default~ (CreditScore + EmploymentType) * (Age + Income + LoanAmount + MonthsEmployed + NumCreditLines + InterestRate + LoanTerm + Education + EmploymentType + MaritalStatus + HasCoSigner), data=loanDefaultData, family="binomial")
step(current.model,
scope=list(lower=current.model, upper=interactions.model),
direction='forward', steps=25)
step(interactions.model,
scope=list(lower=current.model, upper=interactions.model),
direction='backward', steps=25)
current.model = glm(formula = call ~ race + sex + honors + city + yearsexp +
emailincluded + workinschool + militaryexp, family = "binomial",
data = callbackData)
interactions.model=glm(formula = call ~ (race + sex) * (honors + city + yearsexp +
emailincluded + workinschool + militaryexp), family = "binomial",
data = callbackData)
step(current.model,
scope=list(lower=current.model, upper=interactions.model),
direction='forward', steps=25)
step(interactions.model,
scope=list(lower=current.model, upper=interactions.model),
direction='backward', steps=25)
step(fullmodel,
scope=list(lower=basicModel, upper=fullmodel),
direction='forward', steps=25)
fullmodel=glm(Default ~ Age + Income + LoanAmount + CreditScore + MonthsEmployed + NumCreditLines + InterestRate + LoanTerm + Education + EmploymentType + MaritalStatus + HasCoSigner, data=loanDefaultData, family="binomial")
basicModel = glm(Default~CreditScore+EmploymentType, data=loanDefaultData, family="binomial")
step(basicModel,
scope=list(lower=basicModel, upper=fullmodel),
direction='forward', steps=25)
step(fullmodel,
scope=list(lower=basicModel, upper=fullmodel),
direction='forward', steps=25)
fullmodel=glm(call~city+college+yearsexp+honors+militaryexp+
emailincluded+sex+race+computerskills+
workinschool, data=callbackData, family = "binomial")
basicmodel=glm(call~race+sex, data=callbackData, family = "binomial")
step(basicmodel,
scope=list(lower=basicmodel, upper=fullmodel),
direction='forward', steps=25)
step(fullmodel,
scope=list(lower=basicmodel, upper=fullmodel),
direction='backward', steps=25)
step(fullmodel,
scope=list(lower=basicModel, upper=fullmodel),
direction='backward', steps=25)
fullmodel=glm(Default ~ Age + Income + LoanAmount + CreditScore + MonthsEmployed + NumCreditLines + InterestRate + LoanTerm + Education + EmploymentType + MaritalStatus + HasCoSigner, data=loanDefaultData, family="binomial")
basicModel = glm(Default~CreditScore+EmploymentType, data=loanDefaultData, family="binomial")
step(basicModel,
scope=list(lower=basicModel, upper=fullmodel),
direction='forward', steps=25)
step(fullmodel,
scope=list(lower=basicModel, upper=fullmodel),
direction='backward', steps=25)
current.model=glm(formula = Default ~ CreditScore + EmploymentType + Age +
InterestRate + MonthsEmployed + Income + LoanAmount + NumCreditLines +
HasCoSigner + MaritalStatus, family = "binomial", data = loanDefaultData)
interactions.model=glm(formula = Default ~ (CreditScore + EmploymentType) * (Age +
InterestRate + MonthsEmployed + Income + LoanAmount + NumCreditLines +
HasCoSigner + MaritalStatus), family = "binomial", data = loanDefaultData)
step(current.model,
scope=list(lower=current.model, upper=interactions.model),
direction='forward', steps=25)
step(interactions.model,
scope=list(lower=current.model, upper=interactions.model),
direction='backward', steps=25)
current.model = glm(formula = Default ~ CreditScore + EmploymentType + Age +
InterestRate + MonthsEmployed + Income + LoanAmount + NumCreditLines +
HasCoSigner + MaritalStatus + EmploymentType:Age, family = "binomial",
data = loanDefaultData)
summary(current.model)
current.model = glm(formula = call ~ race + sex + honors + city + yearsexp +
emailincluded + workinschool + militaryexp + sex:city + sex:militaryexp +
sex:honors, family = "binomial", data = callbackData)
summary(current.model)
loanDefaultData$MaritalStatus <- relevel(loanDefaultData$MaritalStatus, ref = "Married")
loanDefaultData$MaritalStatus <- relevel(loanDefaultData$MaritalStatus, ref = "Married")
loanDefaultData$MaritalStatus <- factor(loanDefaultData$MaritalStatus)
loanDefaultData$MaritalStatus <- relevel(loanDefaultData$MaritalStatus, ref = "Married")
current.model = glm(formula = Default ~ CreditScore + EmploymentType +
InterestRate + MonthsEmployed + Income + LoanAmount + NumCreditLines +
HasCoSigner + MaritalStatus + EmploymentType:Age, family = "binomial",
data = loanDefaultData)
current.model = glm(formula = Default ~ CreditScore + EmploymentType +
InterestRate + MonthsEmployed + Income + LoanAmount + NumCreditLines +
HasCoSigner + EmploymentType:Age, family = "binomial",
data = loanDefaultData)
final.model = glm(formula = Default ~ CreditScore + EmploymentType +
InterestRate + MonthsEmployed + Income + LoanAmount + NumCreditLines +
HasCoSigner + EmploymentType:Age, family = "binomial",
data = loanDefaultData)
summary(final.model)
final.model = glm(formula = call ~ race + sex + honors + city + yearsexp +
emailincluded + militaryexp + sex:city + sex:militaryexp,
family = "binomial", data = callbackData)
summary(final.model)
final.model = glm(formula = call ~ race + sex + honors + city + yearsexp +
militaryexp + sex:city + sex:militaryexp,
family = "binomial", data = callbackData)
summary(final.model)
step(current.model,
scope=list(lower=current.model, upper=interactions.model),
direction='forward', steps=25)
current.model = glm(formula = call ~ race + sex + honors + city + yearsexp +
emailincluded + workinschool + militaryexp, family = "binomial",
data = callbackData)
interactions.model=glm(formula = call ~ (race + sex) * (honors + city + yearsexp +
emailincluded + workinschool + militaryexp), family = "binomial",
data = callbackData)
step(current.model,
scope=list(lower=current.model, upper=interactions.model),
direction='forward', steps=25)
# Example empty code chunk, remember that each code chunk
oddsimpact = exp(final.model$coefficients)
oddsimpact
loanDefaultData$Married=(loanDefaultData$MaritalStatus=="Married")
final.model = glm(formula = Default ~ CreditScore + EmploymentType +
InterestRate + MonthsEmployed + Income + LoanAmount + NumCreditLines +
Married + HasCoSigner + EmploymentType:Age, family = "binomial",
data = loanDefaultData)
summary(final.model)
# Example empty code chunk, remember that each code chunk
oddsimpact = exp(final.model$coefficients)
oddsimpact
loanDefaultData<-read.csv("../FINAL/LoanDefaultData.csv")
head(loanDefaultData)
knitr::opts_chunk$set(echo = TRUE)
email<-c(45,48,57,53,49,40,39,40,51,79,60,60,71,67,55,32,36,40,90,103,98,108,123)
sales<-c(143,146,159,154,149,132,136,159,140,133,158,142,124,120,133,141,152,151,133,104,109,112,118)
data1<-data.frame(email,sales)
model <- lm(sales ~ emails, data = data)
model <- lm(sales ~ email, data = data)
# Plotting to check assumptions
par(mfrow = c(2, 2)) # Setting up the plotting area for multiple plots
plot(model) # This will generate four plots that include Residuals vs Fitted, Normal Q-Q, Scale-Location, and Residuals vs Leverage
model <- lm(sales ~ email, data = data1)
# Plotting to check assumptions
par(mfrow = c(2, 2)) # Setting up the plotting area for multiple plots
plot(model) # This will generate four plots that include Residuals vs Fitted, Normal Q-Q, Scale-Location, and Residuals vs Leverage
email<-c(45,48,57,53,49,40,39,40,51,79,60,60,71,67,55,32,36,40,90,103,98,108,123)
sales<-c(143,146,159,154,149,132,136,159,140,133,158,142,124,120,133,141,152,151,133,104,109,112,118)
data1<-data.frame(email,sales)
model <- lm(sales ~ email, data = data1)
# Plotting to check assumptions
par(mfrow = c(2, 2)) # Setting up the plotting area for multiple plots
plot(model) # This will generate four plots that include Residuals vs Fitted, Normal Q-Q, Scale-Location, and Residuals vs Leverage
# Fitting the model
model <- lm(sales ~ email, data = data)
# Summarizing the model to get coefficients, residuals, etc.
summary(model)
# Load necessary libraries
# If needed, you can install packages using install.packages("packageName")
library(ggplot2)
# Assuming 'data' is your dataframe with columns 'emails' and 'sales'
# Hypothesis:
# H0: B1 = 0 (No relationship between number of emails and monthly sales)
# Ha: B1 != 0 (A relationship exists between number of emails and monthly sales)
# Step 5: Conduct the statistical test
# Fit the linear regression model
model <- lm(sales ~ emails, data = data)
# Load necessary libraries
# If needed, you can install packages using install.packages("packageName")
library(ggplot2)
# Assuming 'data' is your dataframe with columns 'emails' and 'sales'
# Hypothesis:
# H0: B1 = 0 (No relationship between number of emails and monthly sales)
# Ha: B1 != 0 (A relationship exists between number of emails and monthly sales)
# Step 5: Conduct the statistical test
# Fit the linear regression model
model <- lm(sales ~ email, data = data)
# Step 5: Summary of the model to obtain p-value, coefficients, and other statistics
summary_results <- summary(model)
print(summary_results)
# Extracting the p-value for the slope coefficient
p_value <- summary_results$coefficients[2, 4]
print(paste("P-value: ", p_value))
# Step 6: Decision about Ho based on alpha = 0.05
alpha <- 0.05
if (p_value < alpha) {
print("Reject H0: There is sufficient evidence to conclude there is a relationship between the number of emails received and monthly sales.")
} else {
print("Fail to reject H0: There is insufficient evidence to conclude there is a relationship between the number of emails received and monthly sales.")
}
# Step 7: Additional context - Confidence interval and R-squared
# R-squared value
r_squared <- summary_results$r.squared
print(paste("R-squared: ", r_squared))
# Confidence Interval for the slope
conf_interval <- confint(model, level = 0.95)[2, ]
print("95% Confidence Interval for the slope:")
print(conf_interval)
# Step 8: Interpretation of results
# Simple non-statistical language interpretation
print("The analysis suggests that changes in the number of emails received daily are significantly associated with variations in monthly sales, explaining approximately 56.88% of the variance in sales.")
# Step 9: Type I Error context
# Explanation of a Type I error in this context
print("A Type I error in this context would mean concluding that there is a relationship between emails and sales when, in fact, there isn't one.")
# Plotting to support analysis
# Scatter plot with regression line
ggplot(data, aes(x = emails, y = sales)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Scatter Plot of Emails vs Sales", x = "Number of Emails Received Daily", y = "Monthly Sales")
# Load necessary libraries
# If needed, you can install packages using install.packages("packageName")
library(ggplot2)
# Assuming 'data' is your dataframe with columns 'emails' and 'sales'
# Hypothesis:
# H0: B1 = 0 (No relationship between number of emails and monthly sales)
# Ha: B1 != 0 (A relationship exists between number of emails and monthly sales)
# Step 5: Conduct the statistical test
# Fit the linear regression model
model <- lm(sales ~ email, data = data)
# Step 5: Summary of the model to obtain p-value, coefficients, and other statistics
summary_results <- summary(model)
print(summary_results)
# Extracting the p-value for the slope coefficient
p_value <- summary_results$coefficients[2, 4]
print(paste("P-value: ", p_value))
# Step 6: Decision about Ho based on alpha = 0.05
alpha <- 0.05
if (p_value < alpha) {
print("Reject H0: There is sufficient evidence to conclude there is a relationship between the number of emails received and monthly sales.")
} else {
print("Fail to reject H0: There is insufficient evidence to conclude there is a relationship between the number of emails received and monthly sales.")
}
# Step 7: Additional context - Confidence interval and R-squared
# R-squared value
r_squared <- summary_results$r.squared
print(paste("R-squared: ", r_squared))
# Confidence Interval for the slope
conf_interval <- confint(model, level = 0.95)[2, ]
print("95% Confidence Interval for the slope:")
print(conf_interval)
# Step 8: Interpretation of results
# Simple non-statistical language interpretation
print("The analysis suggests that changes in the number of emails received daily are significantly associated with variations in monthly sales, explaining approximately 56.88% of the variance in sales.")
# Step 9: Type I Error context
# Explanation of a Type I error in this context
print("A Type I error in this context would mean concluding that there is a relationship between emails and sales when, in fact, there isn't one.")
# Plotting to support analysis
# Scatter plot with regression line
ggplot(data, aes(x = email, y = sales)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Scatter Plot of Emails vs Sales", x = "Number of Emails Received Daily", y = "Monthly Sales")
model <- lm(sales ~ email, data = data)
# Plotting to check assumptions # Setting up the plotting area for multiple plots
plot(model) # This will generate four plots that include Residuals vs Fitted, Normal Q-Q, Scale-Location, and Residuals vs Leverage
email<-c(45,48,57,53,49,40,39,40,51,79,60,60,71,67,55,32,36,40,90,103,98,108,123)
sales<-c(143,146,159,154,149,132,136,159,140,133,158,142,124,120,133,141,152,151,133,104,109,112,118)
data1<-data.frame(email,sales)
model <- lm(sales ~ email, data = data)
# Plotting to check assumptions # Setting up the plotting area for multiple plots
plot(model) # This will generate four plots that include Residuals vs Fitted, Normal Q-Q, Scale-Location, and Residuals vs Leverage
residuals <- residuals(model)
hist(residuals, breaks = "Sturges", col = "blue", main = "Histogram of Residuals",
xlab = "Residuals", ylab = "Frequency")
getwd()
setwd("~/Downloads/INFO 370/lab/lab2")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
df <- read_delim("../../data/king-house-prices.csv.bz2")
sample_n(df, 10)
dim(df)
sample_n(df, 10)
colSums(is.na(df))
range(df$price)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(gridExtra)
install(gridExtra)
install.packages('gridExtra')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(gridExtra)
mean(df$price)
median(df$price)
price <- df$price
sqrt(mean((price-mean(price))^2))
sd(price)
l <- ggplot(df, aes(price)) +
geom_line()
l <- ggplot(df, aes(price)) +
geom_line()
l
df %>%
summarise(mean = mean(price) median = median(price))
df %>%
summarise(mean = mean(price) median = median(price))
df %>%
summarise(mean = mean(price), median = median(price))
l <- ggplot(df, aes(price)) +
geom_histogram()
l
l <- ggplot(df, aes(price)) +
geom_histogram(bins = 50, fill = "pink", color="cyan")
l
l <- ggplot(df, aes(price)) +
geom_histogram(bins = 50, fill = "pink", color="cyan")
s <- ggplot(df, aes(price)) +
geom_histogram(bins = 50, fill = "pink", color="cyan") +
scale_x_log10()
grid.arrange(l, s, ncol = 2)
l <- ggplot(df, aes(price)) +
geom_histogram(bins = 33, fill = "pink", color="cyan")
s <- ggplot(df, aes(price)) +
geom_histogram(bins = 33, fill = "pink", color="cyan") +
scale_x_log10()
grid.arrange(l, s, ncol = 2)
df %>%
summarize(cheap = mean(df$price < 200000), expensive = mean(df$price > 1000000))
df %>%
group_by(waterfront)
summarize(expensive = mean(df$price < 1000000))
df %>%
group_by(waterfront) %>%
summarize(expensive = mean(df$price < 1000000))
df %>%
filter(waterfront = TRUE) %>%
summarize(expensive = mean(df$price < 1000000))
df %>%
filter(waterfront = TRUE) %>%
summarize(Less_than_1M = mean(df$price < 1000000))
df %>%
filter(waterfront = FALSE) %>%
summarize(Less_than_1M = mean(df$price < 1000000))
df %>%
filter(waterfront = TRUE) %>%
summarize(Less_than_1M = mean(df$price < 1000000))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(gridExtra)
df <- read_delim("../../data/king-house-prices.csv.bz2")
dim(df)
sample_n(df, 10)
colSums(is.na(df))
range(df$price)
df %>%
summarise(mean = mean(price), median = median(price))
price <- df$price
sqrt(mean((price-mean(price))^2))
sd(price)
l <- ggplot(df, aes(price)) +
geom_histogram(bins = 33, fill = "pink", color="cyan")
s <- ggplot(df, aes(price)) +
geom_histogram(bins = 33, fill = "pink", color="cyan") +
scale_x_log10()
grid.arrange(l, s, ncol = 2)
df %>%
summarize(cheap = mean(df$price < 200000), expensive = mean(df$price > 1000000))
df %>%
filter(waterfront = TRUE) %>%
summarize(Less_than_1M = mean(df$price < 1000000))
df %>%
filter(waterfront == TRUE) %>%
summarize(Less_than_1M = mean(df$price < 1000000))
df %>%
filter(waterfront == TRUE) %>%
summarize(Less_than_1M = df$price < 1000000)
df %>%
filter(waterfront == TRUE) %>%
summarize(Less_than_1M = mean(df$price < 1000000)
df %>%
filter(waterfront = TRUE) %>%
summarize(mean(price<1000000))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(gridExtra)
df <- read_delim("../../data/king-house-prices.csv.bz2")
dim(df)
sample_n(df, 10)
colSums(is.na(df))
range(df$price)
df %>%
summarise(mean = mean(price), median = median(price))
price <- df$price
sqrt(mean((price-mean(price))^2))
sd(price)
l <- ggplot(df, aes(price)) +
geom_histogram(bins = 33, fill = "pink", color="cyan")
s <- ggplot(df, aes(price)) +
geom_histogram(bins = 33, fill = "pink", color="cyan") +
scale_x_log10()
grid.arrange(l, s, ncol = 2)
df %>%
summarize(cheap = mean(df$price < 200000), expensive = mean(df$price > 1000000))
df %>%
filter(waterfront = TRUE) %>%
summarize(mean(price<1000000))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(gridExtra)
df <- read_delim("../../data/king-house-prices.csv.bz2")
dim(df)
sample_n(df, 10)
colSums(is.na(df))
range(df$price)
df %>%
summarise(mean = mean(price), median = median(price))
price <- df$price
sqrt(mean((price-mean(price))^2))
sd(price)
l <- ggplot(df, aes(price)) +
geom_histogram(bins = 33, fill = "pink", color="cyan")
s <- ggplot(df, aes(price)) +
geom_histogram(bins = 33, fill = "pink", color="cyan") +
scale_x_log10()
grid.arrange(l, s, ncol = 2)
df %>%
summarize(cheap = mean(df$price < 200000), expensive = mean(df$price > 1000000))
df %>%
filter(waterfront = TRUE) %>%
summarize(mean(price<1000000))
df %>%
filter(waterfront = TRUE) %>%
summarise(mean(price<1000000))
df %>%
summarise(mean(price < 1000000 & waterfront))
df %>%
group_by(condition) %>%
summarise(median = median(price), mean = mean(price), sd = sd(price))
ggplot(df, aes(as_factor(condition), price)) +
geom_boxplot() +
scale_y_log10()
