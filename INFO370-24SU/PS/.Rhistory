select(-id) %>%
mutate(as.factor(diagnosis, levels = c("B", "M")))
cancer <- read_delim("../data/wdbc.csv.bz2")
sum(is.na(cancer))
cancer <- cancer %>%
select(-id) %>%
mutate(factor(diagnosis, levels = c("B", "M")))
cancer$diagnosis
cancer <- read_delim("../data/wdbc.csv.bz2")
sum(is.na(cancer))
cancer <- cancer %>%
select(-id) %>%
mutate(diagnosis = factor(diagnosis, levels = c("B", "M")))
cancer$diagnosis
library(tidyverse)
library(caret)
library(dplyr)
abnb <- read_delim("../data/airbnb-bangkok-listings.csv.bz2",
col_select = c("bedrooms", "price", "accommodates", "room_type"))
airbnb <- abnb %>%
mutate(price = as.numeric(gsub("[$,]", "", price))) %>%
filter(!is.na(bedrooms))
airbnb <- airbnb %>%
mutate(
bedrooms = cut(bedrooms,
breaks = c(1, 2, 3, 4, Inf),
labels = c("1", "2", "3", "4+"),
right = FALSE),
accommodates = cut(accommodates,
breaks = c(1, 2, 3, 4, Inf),
labels = c("1", "2", "3", "4 and more"),
right = FALSE)
)
m_log <- lm(log(price) ~ bedrooms + room_type + accommodates, data = airbnb)
yhat <- predict(m_log)
rmse <- sqrt(mean((log(airbnb$price) - yhat)^2))
rmse
full2b4a <- airbnb %>%
filter(bedrooms == "2" & accommodates == "4 and more" & room_type == "Entire home/apt")
yhat <- predict(m_log, full2b4a)
mean(yhat)
mean(log(full2b4a$price))
ha <- read_delim("../data/heart.csv.bz2")
dim(ha)
summary(ha)
sum(is.na(ha))
sample_n(ha, 5)
ha <- ha %>%
mutate(
sex = factor(sex),
cp = factor(cp),
fbs = factor(fbs),
restecg = factor(restecg),
exng = factor(exng),
output = factor(output)
)
m <- glm(output ~ ., data = ha, family = binomial())
summary(m)
ha <- ha %>%
mutate(output = factor(output))
m <- train(output ~ . , data = ha, family = "binomial", method = "glm")
prob <- predict(m, type = "prob")
print(prob[1:10, 2])
yhat <- predict(m)
head(yhat, 10)
table(yhat, prob[2] > 0.5)
cm <- table(ha$output, yhat)
cm
cm_f <- confusionMatrix(yhat, ha$output,
positive = "1", mode = "prec_recall")
cm_f
TN <- cm[1, 1]
FN <- cm[1, 2]
TP <- cm[2, 2]
FP <- cm[2, 1]
P <- TP/(TP+FP)
R <- TP/(TP+FN)
P
R
precision(yhat, ha$output, relevant = "1")
recall(yhat, ha$output, relevant = "1")
hist(prob$'1', col= "pink", main = "Histogram of Predicted Probabilities", xlab = "Predicted Probability of Heart Attack")
table(ha$output)
yhat <- factor(rep("1", nrow(ha)), levels = levels(ha$output))
naive_m <- confusionMatrix(yhat, ha$output,
positive = "1", mode = "prec_recall")
naive_m
A <- (165)/(165 + 138)
P <- 165/(165+138)
R <- 165/165
A
P
R
TN <- 4953
TP <- 77
FP <- 0
FN <- 360
cm <- matrix(c(TN, FP, FN, TP), nrow = 2, byrow = TRUE)
cm
4953 / 5390
77/437
precision <- TP/(TP+FP)
recall <- TP/(TP+FN)
F1 <- 2*precision*recall/(recall+precision)
precision
recall
F1
cancer <- read_delim("../data/wdbc.csv.bz2")
sum(is.na(cancer))
cancer <- cancer %>%
select(-id) %>%
mutate(diagnosis = factor(diagnosis, levels = c("B", "M")))
set.seed(370)
it <- createDataPartition(cancer$diagnosis, p = 0.8, list = FALSE)
b0t <- cancer[it, ]
b0v <- cancer[-it, ]
table(b0t$diagnosis)
TN <- 286
TP <- 0
FP <- 0
FN <- 170
cm <- matrix(c(TN, FP, FN, TP), nrow = 2, byrow = TRUE)
cm
table(b0v$diagnosis)
TN <- 71
TP <- 0
FP <- 0
FN <- 42
A <- (TP+TN)/(TN+TP+FN +FP)
P <- TP/(TP+FP)
R <- TP/(TP+FN)
A
P
R
m <- train(
diagnosis ~ texture.mean + concpoints.mean + symmetry.se , data = b0t,
family = binomial, method = "glm"
)
yhat <- predict(m, newdata = b0v)
confusionMatrix(yhat, b0v$diagnosis,
positive = "M", mode = "prec_recall")
b0t$fracdim.mean
m <- train(
diagnosis ~ radius.mean + texture.mean + perimeter.mean , data = b0t,
family = binomial, method = "glm"
)
yhat <- predict(m, newdata = b0v)
cm <- confusionMatrix(yhat, b0v$diagnosis,
positive = "M", mode = "prec_recall")
cm$byClass["Recall"]
m <- train(
diagnosis ~ fracdim.mean + smoothness.mean + compactness.mean , data = b0t,
family = binomial, method = "glm"
)
yhat <- predict(m, newdata = b0v)
cm <- confusionMatrix(yhat, b0v$diagnosis,
positive = "M", mode = "prec_recall")
cm$byClass["Recall"]
m <- train(
diagnosis ~ fracdim.mean + radius.mean + perimeter.mean , data = b0t,
family = binomial, method = "glm"
)
yhat <- predict(m, newdata = b0v)
cm <- confusionMatrix(yhat, b0v$diagnosis,
positive = "M", mode = "prec_recall")
cm$byClass["Recall"]
m <- train(
diagnosis ~ symmetry.worst + radius.mean + perimeter.mean , data = b0t,
family = binomial, method = "glm"
)
yhat <- predict(m, newdata = b0v)
cm <- confusionMatrix(yhat, b0v$diagnosis,
positive = "M", mode = "prec_recall")
cm$byClass["Recall"]
m <- train(
diagnosis ~ symmetry.worst + radius.mean + fracdim.mean , data = b0t,
family = binomial, method = "glm"
)
yhat <- predict(m, newdata = b0v)
cm <- confusionMatrix(yhat, b0v$diagnosis,
positive = "M", mode = "prec_recall")
cm$byClass["Recall"]
features <- colnames(cancer)[-1]
columns <- "diagnosis"
Rv <- numeric()
Rt <- numeric()
for(n in features) {
columns <- c(columns, n)
formula <- as.formula(paste("diagnosis ~", paste(features, collapse = " + ")))
m <- train(formula , data = b0t,
family = binomial, method = "glm"
)
yhatt <- predict(m, newdata = b0t)
tcm <- confusionMatrix(yhatt, b0t$diagnosis,
positive = "M", mode = "prec_recall")
yhatv <- predict(m, newdata = b0v)
vcm <- confusionMatrix(yhatv, b0v$diagnosis,
positive = "M", mode = "prec_recall")
Rv <- c(Rv, vcm$byClass["Recall"])
Rt <- c(Rt, tcm$byClass["Recall"])
}
features <- colnames(cancer)[-1]
columns <- "diagnosis"
Rv <- numeric()
Rt <- numeric()
for(n in features) {
columns <- c(columns, n)
formula <- as.formula(paste("diagnosis ~", paste(features, collapse = " + ")))
m <- train(formula , data = b0t,
family = binomial, method = "glm"
)
yhatt <- predict(m, newdata = b0t)
tcm <- confusionMatrix(yhatt, b0t$diagnosis,
positive = "M", mode = "prec_recall")
yhatv <- predict(m, newdata = b0v)
vcm <- confusionMatrix(yhatv, b0v$diagnosis,
positive = "M", mode = "prec_recall")
Rv <- c(Rv, vcm$byClass["Recall"])
Rt <- c(Rt, tcm$byClass["Recall"])
}
features <- colnames(cancer)[-1]
columns <- "diagnosis"
Rv <- numeric()
Rt <- numeric()
for(n in features) {
columns <- c(columns, n)
X <- cancer[, columns, drop = FALSE]
m <- train(columns ~ X, data = b0t,
family = binomial, method = "glm"
)
yhatt <- predict(m, newdata = b0t)
tcm <- confusionMatrix(yhatt, b0t$diagnosis,
positive = "M", mode = "prec_recall")
yhatv <- predict(m, newdata = b0v)
vcm <- confusionMatrix(yhatv, b0v$diagnosis,
positive = "M", mode = "prec_recall")
Rv <- c(Rv, vcm$byClass["Recall"])
Rt <- c(Rt, tcm$byClass["Recall"])
}
features <- colnames(cancer)[-1]
columns <- "diagnosis"
Rv <- numeric()
Rt <- numeric()
for(n in features) {
columns <- c(columns, n)
formula <- as.formula(paste("diagnosis ~", paste(features, collapse = " + ")))
m <- train(formula , data = b0t,
family = binomial, method = "glm"
)
yhatt <- predict(m, newdata = b0t)
tcm <- confusionMatrix(yhatt, b0t$diagnosis,
positive = "M", mode = "prec_recall")
yhatv <- predict(m, newdata = b0v)
vcm <- confusionMatrix(yhatv, b0v$diagnosis,
positive = "M", mode = "prec_recall")
Rv <- c(Rv, vcm$byClass["Recall"])
Rt <- c(Rt, tcm$byClass["Recall"])
}
cm_f <- confusionMatrix(yhat, ha$output,
positive = "1", mode = "prec_recall")
library(tidyverse)
library(caret)
library(dplyr)
abnb <- read_delim("../data/airbnb-bangkok-listings.csv.bz2",
col_select = c("bedrooms", "price", "accommodates", "room_type"))
airbnb <- abnb %>%
mutate(price = as.numeric(gsub("[$,]", "", price))) %>%
filter(!is.na(bedrooms))
airbnb <- airbnb %>%
mutate(
bedrooms = cut(bedrooms,
breaks = c(1, 2, 3, 4, Inf),
labels = c("1", "2", "3", "4+"),
right = FALSE),
accommodates = cut(accommodates,
breaks = c(1, 2, 3, 4, Inf),
labels = c("1", "2", "3", "4 and more"),
right = FALSE)
)
m_log <- lm(log(price) ~ bedrooms + room_type + accommodates, data = airbnb)
yhat <- predict(m_log)
rmse <- sqrt(mean((log(airbnb$price) - yhat)^2))
rmse
full2b4a <- airbnb %>%
filter(bedrooms == "2" & accommodates == "4 and more" & room_type == "Entire home/apt")
yhat <- predict(m_log, full2b4a)
mean(yhat)
mean(log(full2b4a$price))
ha <- read_delim("../data/heart.csv.bz2")
dim(ha)
summary(ha)
sum(is.na(ha))
sample_n(ha, 5)
ha <- ha %>%
mutate(
sex = factor(sex),
cp = factor(cp),
fbs = factor(fbs),
restecg = factor(restecg),
exng = factor(exng),
output = factor(output)
)
m <- glm(output ~ ., data = ha, family = binomial())
summary(m)
ha <- ha %>%
mutate(output = factor(output))
m <- train(output ~ . , data = ha, family = "binomial", method = "glm")
prob <- predict(m, type = "prob")
print(prob[1:10, 2])
yhat <- predict(m)
head(yhat, 10)
table(yhat, prob[2] > 0.5)
cm <- table(ha$output, yhat)
cm
cm_f <- confusionMatrix(yhat, ha$output,
positive = "1", mode = "prec_recall")
cm_f
TN <- cm[1, 1]
FN <- cm[1, 2]
TP <- cm[2, 2]
FP <- cm[2, 1]
P <- TP/(TP+FP)
R <- TP/(TP+FN)
P
R
precision(yhat, ha$output, relevant = "1")
recall(yhat, ha$output, relevant = "1")
hist(prob$'1', col= "pink", main = "Histogram of Predicted Probabilities", xlab = "Predicted Probability of Heart Attack")
table(ha$output)
yhat <- factor(rep("1", nrow(ha)), levels = levels(ha$output))
naive_m <- confusionMatrix(yhat, ha$output,
positive = "1", mode = "prec_recall")
naive_m
A <- (165)/(165 + 138)
P <- 165/(165+138)
R <- 165/165
A
P
R
TN <- 4953
TP <- 77
FP <- 0
FN <- 360
cm <- matrix(c(TN, FP, FN, TP), nrow = 2, byrow = TRUE)
cm
4953 / 5390
77/437
precision <- TP/(TP+FP)
recall <- TP/(TP+FN)
F1 <- 2*precision*recall/(recall+precision)
precision
recall
F1
cancer <- read_delim("../data/wdbc.csv.bz2")
sum(is.na(cancer))
cancer <- cancer %>%
select(-id) %>%
mutate(diagnosis = factor(diagnosis, levels = c("B", "M")))
set.seed(370)
it <- createDataPartition(cancer$diagnosis, p = 0.8, list = FALSE)
b0t <- cancer[it, ]
b0v <- cancer[-it, ]
table(b0t$diagnosis)
TN <- 286
TP <- 0
FP <- 0
FN <- 170
cm <- matrix(c(TN, FP, FN, TP), nrow = 2, byrow = TRUE)
cm
table(b0v$diagnosis)
TN <- 71
TP <- 0
FP <- 0
FN <- 42
A <- (TP+TN)/(TN+TP+FN +FP)
P <- TP/(TP+FP)
R <- TP/(TP+FN)
A
P
R
m <- train(
diagnosis ~ texture.mean + concpoints.mean + symmetry.se , data = b0t,
family = binomial, method = "glm"
)
yhat <- predict(m, newdata = b0v)
confusionMatrix(yhat, b0v$diagnosis,
positive = "M", mode = "prec_recall")
m <- train(
diagnosis ~ radius.mean + texture.mean + perimeter.mean , data = b0t,
family = binomial, method = "glm"
)
yhat <- predict(m, newdata = b0v)
cm <- confusionMatrix(yhat, b0v$diagnosis,
positive = "M", mode = "prec_recall")
cm$byClass["Recall"]
m <- train(
diagnosis ~ fracdim.mean + smoothness.mean + compactness.mean , data = b0t,
family = binomial, method = "glm"
)
yhat <- predict(m, newdata = b0v)
cm <- confusionMatrix(yhat, b0v$diagnosis,
positive = "M", mode = "prec_recall")
cm$byClass["Recall"]
m <- train(
diagnosis ~ fracdim.mean + radius.mean + perimeter.mean , data = b0t,
family = binomial, method = "glm"
)
yhat <- predict(m, newdata = b0v)
cm <- confusionMatrix(yhat, b0v$diagnosis,
positive = "M", mode = "prec_recall")
cm$byClass["Recall"]
m <- train(
diagnosis ~ symmetry.worst + radius.mean + perimeter.mean , data = b0t,
family = binomial, method = "glm"
)
yhat <- predict(m, newdata = b0v)
cm <- confusionMatrix(yhat, b0v$diagnosis,
positive = "M", mode = "prec_recall")
cm$byClass["Recall"]
m <- train(
diagnosis ~ symmetry.worst + radius.mean + fracdim.mean , data = b0t,
family = binomial, method = "glm"
)
yhat <- predict(m, newdata = b0v)
cm <- confusionMatrix(yhat, b0v$diagnosis,
positive = "M", mode = "prec_recall")
cm$byClass["Recall"]
features <- colnames(cancer)[-1]
columns <- "diagnosis"
Rv <- numeric()
Rt <- numeric()
for(n in features) {
columns <- c(columns, n)
formula <- as.formula(paste("diagnosis ~", paste(features, collapse = " + ")))
m <- train(formula , data = b0t,
family = binomial, method = "glm"
)
yhatt <- predict(m, newdata = b0t)
tcm <- confusionMatrix(yhatt, b0t$diagnosis,
positive = "M", mode = "prec_recall")
yhatv <- predict(m, newdata = b0v)
vcm <- confusionMatrix(yhatv, b0v$diagnosis,
positive = "M", mode = "prec_recall")
Rv <- c(Rv, vcm$byClass["Recall"])
Rt <- c(Rt, tcm$byClass["Recall"])
}
cm_f <- confusionMatrix(yhat, ha$output,
positive = "1", mode = "prec_recall")
ha <- read_delim("../data/heart.csv.bz2")
dim(ha)
summary(ha)
sum(is.na(ha))
sample_n(ha, 5)
ha <- ha %>%
mutate(
sex = factor(sex),
cp = factor(cp),
fbs = factor(fbs),
restecg = factor(restecg),
exng = factor(exng),
output = factor(output)
)
m <- glm(output ~ ., data = ha, family = binomial())
summary(m)
ha <- ha %>%
mutate(output = factor(output))
m <- train(output ~ . , data = ha, family = "binomial", method = "glm")
prob <- predict(m, type = "prob")
print(prob[1:10, 2])
yhat <- predict(m)
head(yhat, 10)
table(yhat, prob[2] > 0.5)
cm <- table(ha$output, yhat)
cm
cm_f <- confusionMatrix(yhat, ha$output,
positive = "1", mode = "prec_recall")
cm_f
TN <- cm_f[1, 1]
cm_f <- confusionMatrix(yhat, ha$output,
positive = "1", mode = "prec_recall")
cm_f
TN <- cm[1, 1]
FN <- cm[1, 2]
TP <- cm[2, 2]
FP <- cm[2, 1]
P <- TP/(TP+FP)
R <- TP/(TP+FN)
P
R
precision(yhat, ha$output, relevant = "1")
recall(yhat, ha$output, relevant = "1")
cm <- table(yhat，ha$output)
cm <- table(yhat，ha$output)
cm <- table(yhat, ha$output)
cm
cm_f <- confusionMatrix(yhat, ha$output,
positive = "1", mode = "prec_recall")
cm_f
TN <- cm[1, 1]
FN <- cm[1, 2]
TP <- cm[2, 2]
FP <- cm[2, 1]
P <- TP/(TP+FP)
R <- TP/(TP+FN)
P
R
precision(yhat, ha$output, relevant = "1")
recall(yhat, ha$output, relevant = "1")
table(yhat, prob[2] > 0.5)
predict(m, type = "response") > 0.5
table(yhat, prob[2] > 0.5)
table(yhat, prob[2] > 0.5)
